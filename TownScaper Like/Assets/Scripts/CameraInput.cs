//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""cameraControll"",
            ""id"": ""fb7503c5-8749-471b-9691-23635e2f5de8"",
            ""actions"": [
                {
                    ""name"": ""Forword"",
                    ""type"": ""Button"",
                    ""id"": ""63e5f1c2-79b4-453a-a7de-e180634b4971"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""412dcf8c-b423-45ad-bf90-0c0b6c3b3b6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""7c874517-d78c-4302-a16d-39c9968f71a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""40278b5c-a1a1-43bb-8fee-788a995bb9d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd7da722-9b98-4223-88c3-b776bf94c565"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forword"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b72cd356-b481-4142-90a6-f48bf05f6e44"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c08e88a-081e-45e3-ae86-7002deb5f77b"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19a4d33b-ef5a-4594-90f7-36c9146bcb22"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // cameraControll
        m_cameraControll = asset.FindActionMap("cameraControll", throwIfNotFound: true);
        m_cameraControll_Forword = m_cameraControll.FindAction("Forword", throwIfNotFound: true);
        m_cameraControll_Back = m_cameraControll.FindAction("Back", throwIfNotFound: true);
        m_cameraControll_Left = m_cameraControll.FindAction("Left", throwIfNotFound: true);
        m_cameraControll_Right = m_cameraControll.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // cameraControll
    private readonly InputActionMap m_cameraControll;
    private ICameraControllActions m_CameraControllActionsCallbackInterface;
    private readonly InputAction m_cameraControll_Forword;
    private readonly InputAction m_cameraControll_Back;
    private readonly InputAction m_cameraControll_Left;
    private readonly InputAction m_cameraControll_Right;
    public struct CameraControllActions
    {
        private @CameraInput m_Wrapper;
        public CameraControllActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forword => m_Wrapper.m_cameraControll_Forword;
        public InputAction @Back => m_Wrapper.m_cameraControll_Back;
        public InputAction @Left => m_Wrapper.m_cameraControll_Left;
        public InputAction @Right => m_Wrapper.m_cameraControll_Right;
        public InputActionMap Get() { return m_Wrapper.m_cameraControll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControllActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControllActions instance)
        {
            if (m_Wrapper.m_CameraControllActionsCallbackInterface != null)
            {
                @Forword.started -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnForword;
                @Forword.performed -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnForword;
                @Forword.canceled -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnForword;
                @Back.started -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnBack;
                @Left.started -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_CameraControllActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_CameraControllActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forword.started += instance.OnForword;
                @Forword.performed += instance.OnForword;
                @Forword.canceled += instance.OnForword;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public CameraControllActions @cameraControll => new CameraControllActions(this);
    public interface ICameraControllActions
    {
        void OnForword(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
